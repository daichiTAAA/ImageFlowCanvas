events {
    worker_connections 1024;
}

http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;
    
    # DNS resolver - conditionally include based on environment
    ${NGINX_RESOLVER}
    
    # WebSocket upgrade handling - more permissive
    map $http_upgrade $connection_upgrade {
        default upgrade;
        'websocket' upgrade;
        '' close;
    }

    server {
        listen       3000;
        server_name  localhost;
        root         /usr/share/nginx/html;
        index        index.html;

        # Handle React Router
        location / {
            try_files $uri $uri/ /index.html;
        }

        # Proxy API requests to backend
        location ~ ^/api/(.*)$ {
            set $backend_host ${BACKEND_HOST};
            set $backend_port ${BACKEND_PORT};
            proxy_pass http://$backend_host:$backend_port/v1/$1$is_args$args;
            proxy_set_header Host $host:$server_port;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 60s;
            proxy_connect_timeout 60s;
            proxy_send_timeout 60s;
            
            # Completely disable redirects
            proxy_redirect off;
            
            # CORS headers - added before any potential redirects
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization' always;
            add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range' always;
            
            # Handle preflight requests
            if ($request_method = 'OPTIONS') {
                add_header 'Access-Control-Allow-Origin' '*';
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS';
                add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization';
                add_header 'Access-Control-Max-Age' 1728000;
                add_header 'Content-Type' 'text/plain; charset=utf-8';
                add_header 'Content-Length' 0;
                return 204;
            }
        }

        # WebSocket proxy with simplified configuration
        location /ws/ {
            # Direct proxy without variable substitution
            proxy_pass http://${BACKEND_HOST}:${BACKEND_PORT}/v1/ws/;
            
            # Essential WebSocket headers
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # WebSocket timeout settings
            proxy_read_timeout 3600s;
            proxy_send_timeout 3600s;
            proxy_connect_timeout 10s;
            
            # Disable buffering for real-time communication
            proxy_buffering off;
            
            # Add logging for debugging
            access_log /var/log/nginx/websocket.log combined;
            error_log /var/log/nginx/websocket_error.log debug;
        }
    }
}
