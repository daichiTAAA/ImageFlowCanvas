apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: backend
  template:
    metadata:
      labels:
        app: backend
    spec:
      containers:
      - name: backend
        image: imageflow/backend:local
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 8000
        env:
        - name: DEPLOYMENT_ENV
          value: "k3s"
        - name: DATABASE_URL
          value: "postgresql+asyncpg://imageflow:imageflow123@postgres-service:5432/imageflow"
        - name: MINIO_ENDPOINT
          value: "minio-service:9000"
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
        - name: KAFKA_BOOTSTRAP_SERVERS
          value: "kafka-service:29092"
        - name: SECRET_KEY
          value: "your-secret-key-change-in-production"
        - name: TRITON_URL
          value: "triton-service:8000"
        livenessProbe:
          httpGet:
            path: /v1/health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /v1/health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: backend-service
  namespace: default
spec:
  selector:
    app: backend
  ports:
    - port: 8000
      targetPort: 8000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: web
  template:
    metadata:
      labels:
        app: web
    spec:
      containers:
      - name: web
        image: imageflow/web:local
        imagePullPolicy: IfNotPresent
        env:
        - name: DEPLOYMENT_ENV
          value: "k3s"
        - name: BACKEND_HOST
          value: "backend-service"
        - name: BACKEND_PORT
          value: "8000"
        - name: NGINX_RESOLVER
          value: ""
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: web-service
  namespace: default
spec:
  selector:
    app: web
  ports:
    - port: 3000
      targetPort: 3000
      nodePort: 30080
  type: NodePort