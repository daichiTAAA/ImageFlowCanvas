services:
  # Database
  postgres:
    image: postgres:17-alpine
    container_name: imageflow-postgres
    environment:
      POSTGRES_DB: imageflow
      POSTGRES_USER: imageflow
      POSTGRES_PASSWORD: imageflow123
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U imageflow"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Message Queue (KRaft mode)
  kafka:
    image: confluentinc/cp-kafka:7.6.0
    container_name: imageflow-kafka
    ports:
      - "9094:9092"
      - "29092:29092"
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
      KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9094'
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
      KAFKA_PROCESS_ROLES: 'broker,controller'
      KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
      KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9094'
      KAFKA_INTER_BROKER_LISTENER_NAME: 'PLAINTEXT'
      KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
      CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    volumes:
      - kafka_data:/tmp/kraft-combined-logs
    healthcheck:
      test: ["CMD", "kafka-topics", "--bootstrap-server", "kafka:29092", "--list"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Object Storage
  minio:
    image: minio/minio:RELEASE.2025-07-23T15-54-02Z
    container_name: imageflow-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # AI Inference Server
  triton:
    image: nvcr.io/nvidia/tritonserver:24.07-py3
    container_name: imageflow-triton
    command: 
      - tritonserver
      - --model-repository=/models
      - --strict-model-config=false
      - --log-verbose=1
    ports:
      - "8001:8000"  # HTTP port (mapped to 8001 to avoid conflict with backend)
      - "8011:8001"  # gRPC port 
      - "8002:8002"  # Metrics port
    volumes:
      - ../../models:/models
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/v2/health/ready"]
      interval: 30s
      timeout: 10s
      retries: 3

  # gRPC Services
  resize-grpc:
    image: imageflow/resize-grpc:local
    container_name: imageflow-resize-grpc
    build:
      context: ../../services/resize-grpc-app
      dockerfile: Dockerfile
    environment:
      - DEPLOYMENT_ENV=docker
      - GRPC_PORT=9090
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - "9090:9090"
    volumes:
      - ../../services/resize-grpc-app/src:/app/src
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3

  ai-detection-grpc:
    image: imageflow/ai-detection-grpc:local
    container_name: imageflow-ai-detection-grpc
    build:
      context: ../../services/ai-detection-grpc-app
      dockerfile: Dockerfile
    environment:
      - DEPLOYMENT_ENV=docker
      - GRPC_PORT=9090
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
      - TRITON_URL=triton:8001
    ports:
      - "9091:9090"
    volumes:
      - ../../services/ai-detection-grpc-app/src:/app/src
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3

  filter-grpc:
    image: imageflow/filter-grpc:local
    container_name: imageflow-filter-grpc
    build:
      context: ../../services/filter-grpc-app
      dockerfile: Dockerfile
    environment:
      - DEPLOYMENT_ENV=docker
      - GRPC_PORT=9090
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - "9092:9090"
    volumes:
      - ../../services/filter-grpc-app/src:/app/src
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3

  camera-stream-grpc:
    image: imageflow/camera-stream-grpc:local
    container_name: imageflow-camera-stream-grpc
    build:
      context: ../../services/camera-stream-grpc-app
      dockerfile: Dockerfile
    environment:
      - DEPLOYMENT_ENV=docker
      - GRPC_PORT=9090
      - MINIO_ENDPOINT=minio:9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin
    ports:
      - "9093:9090"
    volumes:
      - ../../services/camera-stream-grpc-app/src:/app/src
    healthcheck:
      test: ["CMD", "grpc_health_probe", "-addr=localhost:9090"]
      interval: 30s
      timeout: 10s
      retries: 3

  grpc-gateway:
    image: imageflow/grpc-gateway:local
    container_name: imageflow-grpc-gateway
    build:
      context: ../../services/grpc-gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - DEPLOYMENT_ENV=docker
      - RESIZE_GRPC_URL=resize-grpc:9090
      - AI_DETECTION_GRPC_URL=ai-detection-grpc:9090
      - FILTER_GRPC_URL=filter-grpc:9090
      - CAMERA_STREAM_GRPC_URL=camera-stream-grpc:9090
    volumes:
      - ../../services/grpc-gateway/src:/app/src
    depends_on:
      - resize-grpc
      - ai-detection-grpc
      - filter-grpc
      - camera-stream-grpc
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8080/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    image: imageflow/backend:local
    container_name: imageflow-backend
    build:
      context: ../../backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      COMPOSE_PROJECT_NAME: imageflow
      DEPLOYMENT_ENV: docker
      DATABASE_URL: postgresql+asyncpg://imageflow:imageflow123@postgres:5432/imageflow
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SECRET_KEY: your-secret-key-change-in-production
      TRITON_URL: triton:8000
      GRPC_GATEWAY_URL: grpc-gateway:8080
    volumes:
      - ../../backend/app:/app/app
    depends_on:
      postgres:
        condition: service_healthy
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
      grpc-gateway:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import urllib.request; urllib.request.urlopen('http://localhost:8000/v1/health')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web UI
  web:
    image: imageflow/web:local
    container_name: imageflow-web
    build:
      context: ../../
      dockerfile: web/Dockerfile
    ports:
      - "3000:3000"
    environment:
      DEPLOYMENT_ENV: docker
      REACT_APP_API_URL: http://localhost:8000
      REACT_APP_WS_URL: ws://localhost:8000
      BACKEND_HOST: backend
      BACKEND_PORT: "8000"
      NGINX_RESOLVER: ""
    volumes:
      - ../../web/src:/app/src
      - ../../web/public:/app/public
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://127.0.0.1:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local
  kafka_data:
    driver: local

networks:
  default:
    name: imageflow-network
    driver: bridge