apiVersion: argoproj.io/v1alpha1
kind: WorkflowTemplate
metadata:
  name: dynamic-image-processing
  namespace: argo
spec:
  entrypoint: dynamic-pipeline
  
  # ワークフローテンプレートの引数
  arguments:
    parameters:
    - name: input-files
      value: "[]"
    - name: pipeline-definition
      value: "{}"
    - name: execution-id
      value: ""

  templates:
  # 動的パイプライン生成テンプレート
  - name: dynamic-pipeline
    inputs:
      parameters:
      - name: input-files
      - name: pipeline-definition
      - name: execution-id
    dag:
      tasks:
      # パイプライン定義を解析し、動的にタスクを生成
      - name: parse-pipeline
        template: parse-pipeline-template
        arguments:
          parameters:
          - name: pipeline-definition
            value: "{{inputs.parameters.pipeline-definition}}"
          - name: execution-id
            value: "{{inputs.parameters.execution-id}}"

  # パイプライン解析テンプレート
  - name: parse-pipeline-template
    inputs:
      parameters:
      - name: pipeline-definition
      - name: execution-id
    script:
      image: python:3.11-slim
      command: [python]
      source: |
        import json
        import yaml
        import sys
        
        # パイプライン定義を解析
        pipeline_def = json.loads('''{{inputs.parameters.pipeline-definition}}''')
        execution_id = "{{inputs.parameters.execution-id}}"
        
        print(f"Processing pipeline for execution: {execution_id}")
        print(f"Pipeline definition: {pipeline_def}")
        
        # ここで動的にワークフローを生成する処理を実装
        # 実際の実装では、パイプライン定義に基づいてArgo Workflowを動的に生成

  # 汎用コンテナ実行テンプレート
  - name: generic-container-template
    inputs:
      parameters:
      - name: component-type
      - name: input-path
      - name: output-path
      - name: parameters
    outputs:
      parameters:
      - name: output-file-path
        valueFrom:
          path: /tmp/output_path.txt
      artifacts:
      - name: result
        path: /tmp/result.json
    script:
      image: python:3.11-slim
      command: [python]
      source: |
        import json
        import os
        
        component_type = "{{inputs.parameters.component-type}}"
        input_path = "{{inputs.parameters.input-path}}"
        output_path = "{{inputs.parameters.output-path}}"
        parameters = json.loads('''{{inputs.parameters.parameters}}''')
        
        print(f"Executing {component_type} component")
        print(f"Input: {input_path}")
        print(f"Output: {output_path}")
        print(f"Parameters: {parameters}")
        
        # 出力パスをファイルに書き込み
        with open("/tmp/output_path.txt", "w") as f:
            f.write(output_path)
        
        # 結果をJSONで保存
        result = {
            "status": "success",
            "component_type": component_type,
            "input_path": input_path,
            "output_path": output_path,
            "parameters": parameters
        }
        
        with open("/tmp/result.json", "w") as f:
            json.dump(result, f, indent=2)

  # 個別コンポーネントテンプレート
  - name: resize-component
    inputs:
      parameters:
      - name: input-path
      - name: output-path
      - name: width
        value: "800"
      - name: height
        value: "600"
      - name: maintain-aspect
        value: "true"
    outputs:
      parameters:
      - name: output-file-path
        value: "{{inputs.parameters.output-path}}"
      artifacts:
      - name: result
        path: /tmp/result.json
    container:
      image: imageflow/resize-app:latest
      command: [python, resize.py]
      args:
        - "--input-bucket=imageflow-files"
        - "--input-path={{inputs.parameters.input-path}}"
        - "--output-bucket=imageflow-files"
        - "--output-path={{inputs.parameters.output-path}}"
        - "--width={{inputs.parameters.width}}"
        - "--height={{inputs.parameters.height}}"
        - "--maintain-aspect={{inputs.parameters.maintain-aspect}}"
      env:
        - name: MINIO_ENDPOINT
          value: "minio-service.default.svc.cluster.local:9000"
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"

  - name: ai-detection-component
    inputs:
      parameters:
      - name: input-path
      - name: output-path
      - name: model
        value: "yolo"
      - name: confidence
        value: "0.5"
      - name: draw-boxes
        value: "true"
    outputs:
      parameters:
      - name: output-file-path
        value: "{{inputs.parameters.output-path}}"
      artifacts:
      - name: result
        path: /tmp/result.json
    container:
      image: imageflow/triton-detection-app:latest
      command: [python, triton_detect.py]
      args:
        - "--input-bucket=imageflow-files"
        - "--input-path={{inputs.parameters.input-path}}"
        - "--output-bucket=imageflow-files"
        - "--output-path={{inputs.parameters.output-path}}"
        - "--model={{inputs.parameters.model}}"
        - "--confidence={{inputs.parameters.confidence}}"
        - "--draw-boxes={{inputs.parameters.draw-boxes}}"
        - "--triton-url=triton-service.default.svc.cluster.local:8000"
      env:
        - name: MINIO_ENDPOINT
          value: "minio-service.default.svc.cluster.local:9000"
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"
        - name: TRITON_URL
          value: "triton-service.default.svc.cluster.local:8000"

  - name: filter-component
    inputs:
      parameters:
      - name: input-path
      - name: output-path
      - name: filter-type
        value: "blur"
      - name: intensity
        value: "1.0"
    outputs:
      parameters:
      - name: output-file-path
        value: "{{inputs.parameters.output-path}}"
      artifacts:
      - name: result
        path: /tmp/result.json
    container:
      image: imageflow/filter-app:latest
      command: [python, filter.py]
      args:
        - "--input-bucket=imageflow-files"
        - "--input-path={{inputs.parameters.input-path}}"
        - "--output-bucket=imageflow-files"
        - "--output-path={{inputs.parameters.output-path}}"
        - "--filter-type={{inputs.parameters.filter-type}}"
        - "--intensity={{inputs.parameters.intensity}}"
      env:
        - name: MINIO_ENDPOINT
          value: "minio-service.default.svc.cluster.local:9000"
        - name: MINIO_ACCESS_KEY
          value: "minioadmin"
        - name: MINIO_SECRET_KEY
          value: "minioadmin"